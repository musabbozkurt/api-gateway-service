spring:
  application:
    name: student-service
  mvc:
    pathmatch:
      matching-strategy: ant-path-matcher

  datasource:
    url: jdbc:h2:mem:testdb
    username: sa
    password: sa
    driverClassName: org.h2.Driver
  h2:
    console:
      enabled: true
      path: /h2-console

  rabbitmq:
    host: localhost
    port: 5673
    virtual-host: /
    connection-timeout: 0
    template:
      retry:
        enabled: true
        initial-interval: 1000
        max-attempts: 2
        max-interval: 3000
        multiplier: 1

  jackson:
    default-property-inclusion: non_null
    serialization:
      indent-output: true

  cloud:
    function:
      definition: swagger2Consumer
    #This makes the queue durable so that if the application is down, the messages would still be published.
    #These are then processed once the application is up again.
    #Instruction defines exchange and queue names
    #Dead Letter queue is created automatically and bound to main instruction queue.
    stream:
      bindings:
        studentProducer-out-0:
          destination: student_events_destination
          group: student_events_group
        swagger2Consumer-in-0:
          destination: swagger2_events_destination
          group: swagger2_events_group
          consumer:
            maxAttempts: 1
            concurrency: 1
      rabbit:
        bindings:
          swagger2Consumer-in-0:
            consumer:
              exchangeType: fanout
              autoBindDlq: true
              requeueRejected: false
              republishToDlq: true
              dlqDeadLetterExchange:
              dlqTtl: 300000
      default:
        contentType: application/json

  zipkin:
    base-url: http://localhost:9411
    enabled: false

  security:
    oauth2:
      client:
        provider:
          keycloak:
            token-uri: http://localhost:28080/auth/realms/master/protocol/openid-connect/token
            client-id: payment-service
            client-secret: GutAjB6xNSc0huCBEzhNzPEKu57mBdih
            authorization-grant-type: client_credentials
            client-registration-id: payment-service
      resourceserver:
        jwt:
          issuer-uri: http://localhost:28080/auth/realms/master

server:
  port: 8081

feign:
  services:
    keycloak:
      log:
        level: FULL
    payment-client:
      url: http://localhost:8080/gateway
      token-uri: http://localhost:28080/auth/realms/master/protocol/openid-connect/token
      client-id: payment-service
      client-secret: GutAjB6xNSc0huCBEzhNzPEKu57mBdih
      authorization-grant-type: client_credentials
      client-registration-id: payment-service
    hcaptcha: # https://docs.hcaptcha.com/#integration-testing-test-keys
      url: ${HCAPTCHA_URL:https://hcaptcha.com}
      secret: ${HCAPTCHA_SECRET:0x0000000000000000000000000000000000000000}
      response: ${HCAPTCHA_RESPONSE:10000000-aaaa-bbbb-cccc-000000000001}
      site-key: ${HCAPTCHA_SITE_KEY:10000000-ffff-ffff-ffff-000000000001} # Optional
      remote-ip: ${HCAPTCHA_REMOTE_IP:127.0.0.1} # Optional
      risk-score-threshold: ${HCAPTCHA_RISK_SCORE_THRESHOLD:0.8}

keycloak:
  client-id: payment-service
  client-secret: GutAjB6xNSc0huCBEzhNzPEKu57mBdih
  scope: profile
  authorization-grant-type: password
  authorization-uri: http://localhost:28080/auth/realms/master/protocol/openid-connect/auth
  user-info-uri: http://localhost:28080/auth/realms/master/protocol/openid-connect/userinfo
  token-uri: http://localhost:28080/auth/realms/master/protocol/openid-connect/token
  logout-uri: http://localhost:28080/auth/realms/master/protocol/openid-connect/logout
  jwk-set-uri: http://localhost:28080/auth/realms/master/protocol/openid-connect/certs
  certs-id: vdaec4Br3ZnRFtZN-pimK9v1eGd3gL2MHu8rQ6M5SiE